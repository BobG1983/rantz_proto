[package]
name = "rantz_proto"
version = "0.1.0"
authors = ["Robert Gardner'"]
edition = "2021"
license = "MIT OR Apache-2.0"
readme = "README.md"
repository = "https://github.com/BobG1983/rantz_proto"
homepage = "https://github.com/BobG1983/rantz_proto"
keywords = ["gamedev", "bevy"]
categories = ["game-engines"]
description = "An opinionated rust library for transforming on-disk assets into Entities in Bevy."


[dependencies]
bevy = { version = "0.14.0", default-features = true, features = [
  "bevy_asset",
] }
serde = { version = "1.0.203", features = ["derive"] }
bevy_common_assets = { version = "0.11.0", default-features = false }

[features]
# All file formats are disabled by default: you will typically want to enable
# only the formats you need. Picking one per project is recommended.
default = ["ron", "hot_reload"]
# Support for hot reloading
hot_reload = ["bevy/file_watcher"]
# Support for all file format features
# Useful for testing
all_asset_loaders = ["ron", "toml", "yaml", "json", "msgpack", "xml", "csv"]
# Support for the RON file format
# This is a good choice for most projects, as it is a simple, human-readable and plays nice with enums.
ron = ["bevy_common_assets/ron"]
# Support for the TOML file format
# This is a straightforward choice for configuration files.
toml = ["bevy_common_assets/toml"]
# Support for the YAML file format
# This is a relatively common choice for configuration files,
# and substantially more complex than TOML
yaml = ["bevy_common_assets/yaml"]
# Support for the JSON file format
# JSON is nearly universal, but can be a bit verbose and nitpicky.
# The key advantage is that it is well-supported by web technologies,
# and has robust validation tooling.
json = ["bevy_common_assets/json"]
# Support for the MessagePack file format
# This is a binary format that is more compact than JSON, but not human-readable.
msgpack = ["bevy_common_assets/msgpack"]
# Support for the XML file format
# XML is meaningfully more complex and less compact than JSON,
# but comes with schemas and validation tools.
xml = ["bevy_common_assets/xml"]
# Support for the CSV file format.
# This is a great fit for tabular data, but notoriously flaky in edge cases due to the lack of a standard.
# Good interop with spreadsheet software though!
csv = ["bevy_common_assets/csv"]

[dev-dependencies]
ron = "0.8"
rantz_proto = { path = ".", features = ["ron", "hot_reload"] }
# Enables non-default features for examples and tests.
# Give us access to the full Bevy default features for examples.
bevy = { version = "0.14.0" }

[workspace.lints.rust]
unsafe_code = "forbid"
missing_docs = "warn"
